<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= classroom.name %> - Math-learning</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        /* Styles pour le conteneur des contrôles de chat (boutons d'action) */
        .chat-input-controls {
            display: flex;
            gap: 10px; /* Espace entre les boutons */
            margin-bottom: 10px;
        }

        /* Styles pour le formulaire de chat (champ de texte + bouton envoyer) */
        .chat-input-form {
            display: flex;
            align-items: center;
            flex-wrap: wrap; /* Permet aux éléments de passer à la ligne sur petits écrans */
            gap: 10px;
            margin-top: 10px;
        }

        /* Le champ de saisie prendra le maximum d'espace disponible */
        .chat-input-form input[type="text"] {
            flex-grow: 1;
            min-width: 150px; /* Taille minimale pour le champ de saisie */
        }

        /* Styles pour le conteneur d'aperçu de l'image */
        .image-preview-container {
            margin-top: 10px;
            border: 1px solid #ddd;
            padding: 10px;
            display: flex; /* Utilise flexbox pour aligner l'image, le nom et le bouton */
            align-items: center; /* Centre verticalement les éléments */
            gap: 10px; /* Espace entre les éléments de l'aperçu */
            background-color: #f0f0f0;
            border-radius: 5px;
        }

        /* Style de l'image d'aperçu */
        .image-preview-container img {
            max-width: 100px;
            max-height: 100px;
            border-radius: 3px;
        }

        /* Style du bouton pour retirer l'image */
        .remove-image-button {
            background-color: #ff6347; /* Couleur rouge */
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
        }

        /* Style des images dans le chat */
        .message-item .chat-image {
            max-width: 100%; /* S'assure que l'image ne déborde pas du conteneur de message */
            height: auto; /* Maintient le ratio de l'image */
            display: block; /* Pour centrer l'image si désiré, ou simplement la placer sur sa propre ligne */
            margin: 5px auto; /* Marge au-dessus et en-dessous, et centrée */
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Petite ombre pour un meilleur rendu */
        }

        /* NOUVEAU: Styles pour les conteneurs de documents (PDF, Word) */
        .message-item .chat-document-container {
            display: flex;
            flex-direction: column;
            align-items: flex-start; /* Aligne les éléments à gauche */
            gap: 5px;
            margin-top: 5px;
        }

        .message-item .chat-document-link {
            display: inline-flex; /* Permet l'alignement de l'icône et du texte */
            align-items: center;
            background-color: #e9ecef;
            padding: 8px 12px;
            border-radius: 5px;
            text-decoration: none;
            color: #007bff;
            font-weight: bold;
            transition: background-color 0.2s ease;
        }
        .message-item .chat-document-link i {
            margin-right: 8px; /* Espace entre l'icône et le texte */
        }
        .message-item .chat-document-link:hover {
            background-color: #dee2e6;
            text-decoration: underline;
        }

        /* Style pour l'iframe des PDF */
        .message-item .chat-pdf-iframe {
            width: 100%;
            height: 400px; /* Hauteur fixe pour l'aperçu du PDF */
            border: 1px solid #ddd;
            border-radius: 5px;
            overflow: hidden; /* Cache les barres de défilement de l'iframe si le contenu est trop grand */
        }
    </style>

   <link rel="manifest" href="/manifest.json">
    <link rel="apple-touch-icon" href="/images/icons/icon-192x192.png">

    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Math-learning">

    <meta name="mobile-web-app-capable" content="yes">

    <meta name="theme-color" content="#4CAF50"/>

</head>
<body>
    <header>
        <h1><%= classroom.name %> (Code: <%= classroom.classCode %>)</h1>
        <nav>
            <ul>
                <li><a href="/">Accueil</a></li>
                <% if (user && user.role === 'teacher') { %>
                    <li><a href="/teacher/dashboard">Tableau de bord Professeur</a></li>
                <% } else if (user) { %>
                    <li><a href="/student/dashboard">Tableau de bord Élève</a></li>
                <% } %>
                <li><a href="/logout">Déconnexion</a></li>
            </ul>
        </nav>
    </header>
    <main>
        <h2>Détails de la classe : <%= classroom.name %></h2>
        <p>Professeur :
            <% if (classroom.teacher && classroom.teacher.username) { %>
                <strong><%= classroom.teacher.username %></strong>
            <% } else { %>
                <strong>Non spécifié</strong>
            <% } %>
        </p>
        <p>Nombre d'élèves inscrits : <strong><%= classroom.students ? classroom.students.length : 0 %></strong></p>
        <hr>

        <section class="chat-container">
            <h3>Chat de la classe</h3>
            <div id="messages" class="chat-box">
                <% if (classroom.messages && classroom.messages.length > 0) { %>
                    <% classroom.messages.forEach(function(message) { %>
                        <div class="message-item">
                            <strong>
                                <% if (message.sender && message.sender.username) { %>
                                    <%= message.sender.username %>
                                <% } else { %>
                                    Utilisateur Inconnu
                                <% } %>
                            :</strong>
                            <% if (message.type === 'image' && message.fileUrl) { %>
                                <img src="<%= message.fileUrl %>" alt="Image de chat" class="chat-image" onclick="window.open(this.src)">
                            <% } else if (message.type === 'file' && message.fileUrl) { %>
                                <%
                                    // Determine icon based on file extension
                                    let fileIconClass = 'fas fa-file'; // Default icon
                                    let fileNameDisplay = message.content || message.fileName || 'Document';
                                    const fileExtension = message.fileUrl ? message.fileUrl.split('.').pop().toLowerCase() : '';

                                    if (fileExtension === 'pdf') {
                                        fileIconClass = 'fas fa-file-pdf';
                                    } else if (fileExtension === 'doc' || fileExtension === 'docx') {
                                        fileIconClass = 'fas fa-file-word';
                                    } else if (fileExtension === 'xls' || fileExtension === 'xlsx') {
                                        fileIconClass = 'fas fa-file-excel';
                                    } else if (fileExtension === 'ppt' || fileExtension === 'pptx') {
                                        fileIconClass = 'fas fa-file-powerpoint';
                                    } else if (fileExtension === 'zip' || fileExtension === 'rar') {
                                        fileIconClass = 'fas fa-file-archive';
                                    }
                                %>
                                <div class="chat-document-container">
                                    <% if (fileExtension === 'pdf') { %>
                                        <p><strong>Aperçu PDF :</strong></p>
                                        <iframe src="<%= message.fileUrl %>" class="chat-pdf-iframe"></iframe>
                                    <% } %>
                                    <a href="<%= message.fileUrl %>" target="_blank" class="chat-document-link" download="<%= fileNameDisplay %>">
                                        <i class="<%= fileIconClass %>"></i> Télécharger <%= fileNameDisplay %>
                                    </a>
                                </div>
                            <% } else { %>
                                <%= message.content %>
                            <% } %>
                            <span class="timestamp"><%= message.timestamp ? new Date(message.timestamp).toLocaleString() : 'Date inconnue' %></span>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p>Aucun message pour le moment. Soyez le premier à envoyer un message !</p>
                <% } %>
            </div>
            <div class="chat-input-controls">
                <input type="file" id="fileUploadInput" name="file" accept="image/*,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document" style="display: none;">
                <button type="button" id="uploadFileButton" class="button">Fichier (<i class="fas fa-paperclip" style="vertical-align: middle;"></i>)</button>
            </div>
            <div id="filePreview" class="image-preview-container" style="display: none;">
                <span id="previewContent"></span>
                <span id="fileName"></span>
                <button type="button" id="removeFileButton" class="remove-image-button">X</button>
            </div>
            <form id="chatForm" class="chat-input-form">
                <input type="text" id="messageInput" placeholder="Écrivez votre message..." required>
                <button type="submit" class="button">Envoyer</button>
            </form>
        </section>
        <hr>

        <section class="files-container">
            <h3>Dépôt de Fichiers</h3>
            <form action="/classes/<%= classroom._id %>/files" method="POST" enctype="multipart/form-data" class="file-upload-form">
                <label for="fileUpload">Uploader un fichier :</label>
                <input type="file" id="fileUpload" name="classFile" required>

                <label for="fileCategory">Catégorie :</label>
                <select id="fileCategory" name="category" required>
                    <option value="">Sélectionner une catégorie</option>
                    <option value="exercise">Exercice</option>
                    <option value="homework">Devoir</option>
                    <option value="correction">Correction</option>
                </select>
                <button type="submit" class="button">Uploader</button>
            </form>

            <h4>Fichiers Déposés par Catégorie</h4>
            <%
                const categorizedFiles = {
                    'exercise': [],
                    'homework': [],
                    'correction': []
                };

                if (classroom.files && classroom.files.length > 0) {
                    classroom.files.forEach(function(file) {
                        if (categorizedFiles[file.category]) {
                            categorizedFiles[file.category].push(file);
                        }
                    });
                }
            %>

            <h5>Exercices</h5>
            <% if (categorizedFiles.exercise.length > 0) { %>
                <ul class="file-list">
                    <% categorizedFiles.exercise.forEach(function(file) { %>
                        <li>
                            <%
                                let displayFileName = file.fileName || 'Fichier sans nom';
                                let fileUrl = '#'; // Fallback
                                // If file.filePath is a Cloudinary URL, use it directly
                                if (file.filePath && typeof file.filePath === 'string' && file.filePath.startsWith('http')) {
                                    fileUrl = file.filePath;
                                } else if (file.filePath && typeof file.filePath === 'string') {
                                    // Old local path, eventually to be removed or adapted
                                    const pathParts = file.filePath.split(/[\\/]/);
                                    const fileNameInPath = pathParts[pathParts.length - 1];
                                    if (fileNameInPath) {
                                        fileUrl = "/uploads/" + fileNameInPath; // This will no longer work on Render without local storage
                                    }
                                }
                            %>
                            <a href="<%= fileUrl %>" target="_blank" download>
                                <%= displayFileName %>
                            </a>
                            (Taille: <%= file.fileSize ? (file.fileSize / 1024 / 1024).toFixed(2) + ' Mo' : 'N/A' %>) -
                            Uploadé par
                            <strong>
                                <% if (file.uploader && file.uploader.username) { %>
                                    <%= file.uploader.username %>
                                <% } else { %>
                                    Utilisateur Inconnu
                                <% } %>
                            </strong>
                            le <%= file.uploadDate ? new Date(file.uploadDate).toLocaleDateString('fr-FR') : 'Date inconnue' %>
                        </li>
                    <% }); %>
                </ul>
            <% } else { %>
                <p>Aucun exercice déposé pour le moment.</p>
            <% } %>

            <h5>Devoirs</h5>
            <% if (categorizedFiles.homework.length > 0) { %>
                <ul class="file-list">
                    <% categorizedFiles.homework.forEach(function(file) { %>
                        <li>
                            <%
                                let displayFileName = file.fileName || 'Fichier sans nom';
                                let fileUrl = '#';
                                if (file.filePath && typeof file.filePath === 'string' && file.filePath.startsWith('http')) {
                                    fileUrl = file.filePath;
                                } else if (file.filePath && typeof file.filePath === 'string') {
                                    const pathParts = file.filePath.split(/[\\/]/);
                                    const fileNameInPath = pathParts[pathParts.length - 1];
                                    if (fileNameInPath) {
                                        fileUrl = "/uploads/" + fileNameInPath;
                                    }
                                }
                            %>
                            <a href="<%= fileUrl %>" target="_blank" download>
                                <%= displayFileName %>
                            </a>
                            (Taille: <%= file.fileSize ? (file.fileSize / 1024 / 1024).toFixed(2) + ' Mo' : 'N/A' %>) -
                            Uploadé par
                            <strong>
                                <% if (file.uploader && file.uploader.username) { %>
                                    <%= file.uploader.username %>
                                <% } else { %>
                                    Utilisateur Inconnu
                                <% } %>
                            </strong>
                            le <%= file.uploadDate ? new Date(file.uploadDate).toLocaleDateString('fr-FR') : 'Date inconnue' %>
                        </li>
                    <% }); %>
                </ul>
            <% } else { %>
                <p>Aucun devoir déposé pour le moment.</p>
            <% } %>

            <h5>Corrections</h5>
            <% if (categorizedFiles.correction.length > 0) { %>
                <ul class="file-list">
                    <% categorizedFiles.correction.forEach(function(file) { %>
                        <li>
                            <%
                                let displayFileName = file.fileName || 'Fichier sans nom';
                                let fileUrl = '#';
                                if (file.filePath && typeof file.filePath === 'string' && file.filePath.startsWith('http')) {
                                    fileUrl = file.filePath;
                                } else if (file.filePath && typeof file.filePath === 'string') {
                                    const pathParts = file.filePath.split(/[\\/]/);
                                    const fileNameInPath = pathParts[pathParts.length - 1];
                                    if (fileNameInPath) {
                                        fileUrl = "/uploads/" + fileNameInPath;
                                    }
                                }
                            %>
                            <a href="<%= fileUrl %>" target="_blank" download>
                                <%= displayFileName %>
                            </a>
                            (Taille: <%= file.fileSize ? (file.fileSize / 1024 / 1024).toFixed(2) + ' Mo' : 'N/A' %>) -
                            Uploadé par
                            <strong>
                                <% if (file.uploader && file.uploader.username) { %>
                                    <%= file.uploader.username %>
                                <% } else { %>
                                    Utilisateur Inconnu
                                <% } %>
                            </strong>
                            le <%= file.uploadDate ? new Date(file.uploadDate).toLocaleDateString('fr-FR') : 'Date inconnue' %>
                        </li>
                    <% }); %>
                </ul>
            <% } else { %>
                <p>Aucune correction déposée pour le moment.</p>
            <% } %>

        </section>
        <hr>
    </main>

    <footer>
        <p>&copy; 2025 Math-learning</p>
    </footer>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Initialisation de Socket.IO
        const socket = io();

        const classroomId = '<%= classroom._id %>';
        const currentUsername = '<%= user.username %>';
        // Get the current user's ID from session.user._id (assuming it's available)
        const currentUserId = '<%= user._id %>'; // IMPORTANT: Make sure user._id is passed to EJS

        // Références aux éléments HTML du chat
        const messagesDiv = document.getElementById('messages');
        const messageInput = document.getElementById('messageInput');
        const chatForm = document.getElementById('chatForm');

        // Éléments pour l'upload de fichiers
        const uploadFileButton = document.getElementById('uploadFileButton');
        const fileUploadInput = document.getElementById('fileUploadInput');
        const filePreviewContainer = document.getElementById('filePreview');
        const previewContent = document.getElementById('previewContent');
        const fileNameSpan = document.getElementById('fileName');
        const removeFileButton = document.getElementById('removeFileButton');

        let selectedFile = null;
        let currentMessageType = 'text'; // Can be 'text', 'image' or 'file'
        let currentFileUrl = '';
        let currentFileMimeType = ''; // NEW: To store the detected MIME type

        // Confirm Socket.IO client loaded
        console.log("Socket.IO client loaded.");
        console.log("Classroom ID:", classroomId);
        console.log("Current User:", currentUsername);
        console.log("Current User ID:", currentUserId);


        // 1. Join the specific classroom chat room
        if (classroomId) {
            socket.emit('joinRoom', classroomId);
            console.log(`Client trying to join room: ${classroomId}`);
        } else {
            console.error("Classroom ID is not defined for Socket.IO joinRoom.");
        }

        // --- File Upload Logic ---
        uploadFileButton.addEventListener('click', () => {
            fileUploadInput.click(); // Simulate click on the file input
        });

        fileUploadInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                selectedFile = file;
                currentFileMimeType = file.type; // Store MIME type
                fileNameSpan.textContent = file.name;
                filePreviewContainer.style.display = 'flex';

                // Specific preview based on file type
                if (file.type.startsWith('image/')) {
                    previewContent.innerHTML = `<img src="${URL.createObjectURL(file)}" alt="Image Preview" style="max-width:100px; max-height:100px; border-radius:3px;">`;
                    currentMessageType = 'image';
                } else if (file.type === 'application/pdf') {
                    previewContent.innerHTML = `<i class="fas fa-file-pdf" style="font-size: 40px; color: #dc3545;"></i>`;
                    currentMessageType = 'file';
                } else if (file.type === 'application/msword' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                    previewContent.innerHTML = `<i class="fas fa-file-word" style="font-size: 40px; color: #007bff;"></i>`;
                    currentMessageType = 'file';
                } else {
                    previewContent.innerHTML = `<i class="fas fa-file" style="font-size: 40px; color: #6c757d;"></i>`;
                    currentMessageType = 'file';
                }

                // Disable text message input
                messageInput.value = `[${file.type.startsWith('image/') ? 'Image' : 'Fichier'} inséré: ${file.name}]`;
                messageInput.disabled = true;
            } else {
                // If no file selected or user cancels
                resetChatInput();
            }
        });

        removeFileButton.addEventListener('click', () => {
            resetChatInput(); // Reset chat input, including file
        });

        // 2. Handle message submission via form
        chatForm.addEventListener('submit', async (e) => {
            e.preventDefault(); // Prevent page reload

            let messageToSend = {
                classroomId: classroomId,
                type: currentMessageType,
                content: messageInput.value.trim()
            };

            if ((currentMessageType === 'image' || currentMessageType === 'file') && selectedFile) {
                const formData = new FormData();
                formData.append('file', selectedFile);

                try {
                    const response = await fetch('/api/chat/upload-file', {
                        method: 'POST',
                        body: formData
                    });
                    const result = await response.json();

                    if (result.success) {
                        currentFileUrl = result.fileUrl;
                        currentFileMimeType = result.fileType; // Get actual MIME type from server
                        messageToSend.fileUrl = currentFileUrl;
                        messageToSend.fileType = currentFileMimeType; // Add fileType to emitted message
                        messageToSend.content = selectedFile.name; // Send filename as content for files
                        messageToSend.type = result.fileType.startsWith('image/') ? 'image' : 'file'; // Ensure type is correct
                        console.log('File uploaded, URL:', currentFileUrl, 'Type:', currentFileMimeType);
                    } else {
                        alert('Error uploading file: ' + result.message);
                        resetChatInput();
                        return; // Prevent message sending if upload failed
                    }
                } catch (error) {
                    console.error('Network or server error during file upload:', error);
                    alert('Network error during file upload.');
                    resetChatInput();
                    return; // Prevent message sending in case of error
                }
            } else {
                // If it's a text message, ensure there is content
                if (!messageToSend.content) {
                    alert('Please write a message or insert a file.');
                    return;
                }
                messageToSend.type = 'text'; // Ensure type is 'text' if no file
            }

            console.log('Client emitting chatMessage:', messageToSend);
            socket.emit('chatMessage', messageToSend);

            resetChatInput(); // Reset input after sending

            messagesDiv.scrollTop = messagesDiv.scrollHeight; // Scroll chat box to bottom
        });

        // Function to reset chat input
        function resetChatInput() {
            messageInput.value = '';
            messageInput.disabled = false;
            currentMessageType = 'text';
            selectedFile = null;
            currentFileUrl = '';
            currentFileMimeType = ''; // Reset MIME type
            fileUploadInput.value = ''; // Reset file input to allow selecting same file again
            filePreviewContainer.style.display = 'none'; // Hide file preview
            previewContent.innerHTML = ''; // Clear preview content
            fileNameSpan.textContent = ''; // Clear filename
        }

        // 3. Handle receiving a message from the server
        socket.on('message', (msg) => {
            console.log('Client received message from server via socket:', msg);

            const messageElement = document.createElement('div');
            messageElement.classList.add('message-item');

            // Add class for 'my-message' or 'other-message'
            if (msg.senderId === currentUserId) {
                messageElement.classList.add('my-message');
            } else {
                messageElement.classList.add('other-message');
            }

            const senderDisplayName = msg.senderUsername || 'Utilisateur Inconnu';
            let messageContentHtml = '';

            if (msg.type === 'image' && msg.fileUrl) {
                messageContentHtml = `<img src="${msg.fileUrl}" alt="Image de chat" class="chat-image" onclick="window.open(this.src)">`;
            } else if (msg.type === 'file' && msg.fileUrl) {
                // Determine icon based on file extension (for display)
                let fileIconClass = 'fas fa-file';
                const fileExtension = msg.fileUrl ? msg.fileUrl.split('.').pop().toLowerCase() : '';

                if (fileExtension === 'pdf') {
                    fileIconClass = 'fas fa-file-pdf';
                } else if (fileExtension === 'doc' || fileExtension === 'docx') {
                    fileIconClass = 'fas fa-file-word';
                } else if (fileExtension === 'xls' || fileExtension === 'xlsx') {
                    fileIconClass = 'fas fa-file-excel';
                } else if (fileExtension === 'ppt' || fileExtension === 'pptx') {
                    fileIconClass = 'fas fa-file-powerpoint';
                } else if (fileExtension === 'zip' || fileExtension === 'rar') {
                    fileIconClass = 'fas fa-file-archive';
                }

                // Render based on file type (PDF embed vs. generic link)
                messageContentHtml = `
                    <div class="chat-document-container">
                        ${fileExtension === 'pdf' ? `<p><strong>Aperçu PDF :</strong></p><iframe src="${msg.fileUrl}" class="chat-pdf-iframe"></iframe>` : ''}
                        <a href="${msg.fileUrl}" target="_blank" class="chat-document-link" download="${msg.content || 'Fichier'}">
                            <i class="${fileIconClass}"></i> Télécharger ${msg.content || 'Fichier'}
                        </a>
                    </div>
                `;
            } else {
                messageContentHtml = msg.content;
            }

            messageElement.innerHTML = `
                <strong>${senderDisplayName}:</strong> ${messageContentHtml}
                <span class="timestamp">${msg.timestamp ? new Date(msg.timestamp).toLocaleString() : 'Date inconnue'}</span>
            `;

            messagesDiv.appendChild(messageElement);
            // Scroll chat box to bottom
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        // 4. Initial scroll to bottom to see latest messages
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    </script>
</body>
</html>
